{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Page is under construction. Please come back later.","title":"Home"},{"location":"#home","text":"Page is under construction. Please come back later.","title":"Home"},{"location":"experiments/experiment-examples/","text":"Experiment Examples Page is under construction. Please come back later.","title":"\ud83d\udea7 Experiment Examples"},{"location":"experiments/experiment-examples/#experiment-examples","text":"Page is under construction. Please come back later.","title":"Experiment Examples"},{"location":"experiments/github-playbook/","text":"GitHub Playbook This section contains information on how to use GitHub. The information in this section is based on the experience of the authors of these guidelines. Note that you don't have to follow these guidelines. You can follow any guidelines you want. However, we recommend you to follow what is written here. Working Individually When working individually, you are the architect of your project. You can follow whatever guidelines you want. However, it is a good practice to have the following points in mind: Have a structured repository. The repository should be structured in a way that makes it easy to navigate and understand. For example, you can have a folder for the code, a folder for the data, and a folder for the documentation. For python projects, you can use the cookiecutter template. Use linters to have concise code. Linters are tools that check the code for errors and inconsistencies. It is good practice to set up a linter for the chosen programming language. For example, for Python, you can use pylint . Use a README file. The README file is a file that contains information about the project. It should contain information about the project, how to install the project, how to run the project, and how to contribute to the project. Basically, the README file should contain all the information that a person needs to know to start working on the project. Working in a Team When working in a team, you should follow the following guidelines: Create a team. To create a team, go to GitHub Teams and click on the \"New Team\" button. Enter the name of the team and click on the \"Create Team\" button. Next, add the members of the team. Have a main repository. The main repository is the repository containing all of the code and the documentation of the project. The main repository can be either private or public. If the main repository is private, make sure that all of the members of the team have access to it. To change that, go to the repository \"Settings > Collaborators and teams > Manage access > Add people\" and add the members of the team as collaborators. Do not commit directly to the main repository The main repository should be used only for storing the code that has been reviewed and approved by the team. Therefore, do not commit directly to it. Instead, create a fork . Create a fork of the main repository. Each member of the team should create a fork of the main repository. A fork is a copy of the repository on which one can work on without worrying they will mess up the whole code base (the main repository also serves as a backup). To create a fork, go to the main repository and click on the \"Fork\" button in the top right corner. This will create a copy of the repository in your account. Work on the code. To work on the code, follow the steps in Working on the code . Working on the Code Once you setup your repository, you can start working on the code. Some of the steps (2, 8-10) are specific for working in a team and are labelled as such. To start working on the code, follow the following steps: Clone the repository. To clone the repository, run git clone <repository-url> . [team] Create a new remote for the main repository. To create a new remote, run git remote add <remote-name> <remote-url> . The remote name should be descriptive of the remote. For example, if you are working on a project with a team, you can name the remote team . Create a new branch for each feature you are working on. To create a new branch, run git checkout -b <branch-name> . The branch name should be descriptive of the feature you are working on. For example, if you are working on a feature that adds a new feature to the code, you can name the branch add-new-feature . Implement the feature you are working on. To implement the feature, edit the code. Writing documentation It is a good practice to write documentation for the code you are working on. This will help you and the other team members to understand the code. You can write the documentation in the code itself or in a separate file. If you are writing the documentation in a separate file, make sure to add the file to the repository. While the documentation is not necessary at every step of the development, it is advised to at least periodically add it to the code (after a group of features were completed). Add the changes you made to the code. To add the changes, run git add <file-name> . Commit the changes you made to the code. To commit the changes, run git commit -m \"<commit-message>\" . The commit message should be descriptive of the changes you made to the code. Push the changes to remote. Once you are done with the feature, commit the changes and push them to the remote repository. To push the changes, run git push origin <branch-name> . [team] Create a pull request (PR) to merge the changes to the main repository. To create a pull request, go to the main repository and click on the \"New pull request\" button. Then, select the branch you want to merge to the main repository. Finally, click on the \"Create pull request\" button. [team] Assign reviewers to the PR. Once the pull request is created, assign it to the team members for review. To assign the pull request, go to the pull request and click on the \"Reviewers\" button. Then, select the team members you want to assign the pull request to. Finally, click on the \"Submit review\" button. Assigning reviewers When working in a team, you should assign the pull request to the team member who is responsible for reviewing the code. If you are not sure who is responsible for reviewing the code, assign the project leader. Checking for documentation When reviewing the code, it is also good to check if the documentation is up to date. If the documentation is not up to date, you can ask the person who created the pull request to update it. [team] Merge the PR. Once the pull request is reviewed, merge it to the main repository. To merge the pull request, go to the pull request and click on the \"Merge pull request\" button. Then, click on the \"Confirm merge\" button. Who should merge the PR? Before starting to work on the code, you should decide who should merge the pull request. There are two options: The project leader merges the pull request. The person who created the pull request merges it. This varies from project to project. Therefore, you should decide who should merge the pull request before starting to work on the code. But in both cases, the code has to be reviewed before the merging happens. Delete the branch. To delete the branch, go your remote repository and click on the \"Branches\" button. Then, select the branch you want to delete and click on the \"Delete branch\" button. Locally, you can delete the branch by running git branch -d <branch-name> . Pull the changes from the main repository. To pull the changes, run git pull <remote-name> master . Once you are done with the steps above, you can repeat the process for the next feature. Coding workflow The following steps are the steps you should follow when working on the code after you setup your repository locally: create a new branch for each feature you are working on: git checkout -b <branch-name> implement the feature you are working on add the changes you made to the code: git add <file-name> commit the changes you made to the code: git commit -m \"<commit-message>\" once you are done with the feature, commit the changes and push them to the remote repository: git push origin <branch-name> Additional steps are required when working in a team: create a pull request wait for the pull request to be reviewed and merged delete the branch you created: git branch -d <branch-name> Afterwards, you can clean the local repository by pulling the changes from the main repository: git pull <main-remote-name> main Repeat the process for the next feature. Working on the Documentation The documentation helps the team members to understand the code. Therefore, it is good practice to write the documentation for the code you are working on. The documentation should be clear and concise. It should also be updated periodically. The documentation can be written in the code itself or in a separate file. If you are writing the documentation in a separate file, make sure to add the file to the repository. From the documentation, the following things should be clear: What is the purpose of the code? How to start the code (if applicable)? What are the features of the code? How to use the code? Documentation on a project The way how documentation is provided should be decided within the team. Some teams prefer to write the documentation in the code itself, while others prefer to write it in a separate file. Talk to your team members and decide how you will write the documentation.","title":"GitHub Playbook"},{"location":"experiments/github-playbook/#github-playbook","text":"This section contains information on how to use GitHub. The information in this section is based on the experience of the authors of these guidelines. Note that you don't have to follow these guidelines. You can follow any guidelines you want. However, we recommend you to follow what is written here.","title":"GitHub Playbook"},{"location":"experiments/github-playbook/#working-individually","text":"When working individually, you are the architect of your project. You can follow whatever guidelines you want. However, it is a good practice to have the following points in mind: Have a structured repository. The repository should be structured in a way that makes it easy to navigate and understand. For example, you can have a folder for the code, a folder for the data, and a folder for the documentation. For python projects, you can use the cookiecutter template. Use linters to have concise code. Linters are tools that check the code for errors and inconsistencies. It is good practice to set up a linter for the chosen programming language. For example, for Python, you can use pylint . Use a README file. The README file is a file that contains information about the project. It should contain information about the project, how to install the project, how to run the project, and how to contribute to the project. Basically, the README file should contain all the information that a person needs to know to start working on the project.","title":"Working Individually"},{"location":"experiments/github-playbook/#working-in-a-team","text":"When working in a team, you should follow the following guidelines: Create a team. To create a team, go to GitHub Teams and click on the \"New Team\" button. Enter the name of the team and click on the \"Create Team\" button. Next, add the members of the team. Have a main repository. The main repository is the repository containing all of the code and the documentation of the project. The main repository can be either private or public. If the main repository is private, make sure that all of the members of the team have access to it. To change that, go to the repository \"Settings > Collaborators and teams > Manage access > Add people\" and add the members of the team as collaborators. Do not commit directly to the main repository The main repository should be used only for storing the code that has been reviewed and approved by the team. Therefore, do not commit directly to it. Instead, create a fork . Create a fork of the main repository. Each member of the team should create a fork of the main repository. A fork is a copy of the repository on which one can work on without worrying they will mess up the whole code base (the main repository also serves as a backup). To create a fork, go to the main repository and click on the \"Fork\" button in the top right corner. This will create a copy of the repository in your account. Work on the code. To work on the code, follow the steps in Working on the code .","title":"Working in a Team"},{"location":"experiments/github-playbook/#working-on-the-code","text":"Once you setup your repository, you can start working on the code. Some of the steps (2, 8-10) are specific for working in a team and are labelled as such. To start working on the code, follow the following steps: Clone the repository. To clone the repository, run git clone <repository-url> . [team] Create a new remote for the main repository. To create a new remote, run git remote add <remote-name> <remote-url> . The remote name should be descriptive of the remote. For example, if you are working on a project with a team, you can name the remote team . Create a new branch for each feature you are working on. To create a new branch, run git checkout -b <branch-name> . The branch name should be descriptive of the feature you are working on. For example, if you are working on a feature that adds a new feature to the code, you can name the branch add-new-feature . Implement the feature you are working on. To implement the feature, edit the code. Writing documentation It is a good practice to write documentation for the code you are working on. This will help you and the other team members to understand the code. You can write the documentation in the code itself or in a separate file. If you are writing the documentation in a separate file, make sure to add the file to the repository. While the documentation is not necessary at every step of the development, it is advised to at least periodically add it to the code (after a group of features were completed). Add the changes you made to the code. To add the changes, run git add <file-name> . Commit the changes you made to the code. To commit the changes, run git commit -m \"<commit-message>\" . The commit message should be descriptive of the changes you made to the code. Push the changes to remote. Once you are done with the feature, commit the changes and push them to the remote repository. To push the changes, run git push origin <branch-name> . [team] Create a pull request (PR) to merge the changes to the main repository. To create a pull request, go to the main repository and click on the \"New pull request\" button. Then, select the branch you want to merge to the main repository. Finally, click on the \"Create pull request\" button. [team] Assign reviewers to the PR. Once the pull request is created, assign it to the team members for review. To assign the pull request, go to the pull request and click on the \"Reviewers\" button. Then, select the team members you want to assign the pull request to. Finally, click on the \"Submit review\" button. Assigning reviewers When working in a team, you should assign the pull request to the team member who is responsible for reviewing the code. If you are not sure who is responsible for reviewing the code, assign the project leader. Checking for documentation When reviewing the code, it is also good to check if the documentation is up to date. If the documentation is not up to date, you can ask the person who created the pull request to update it. [team] Merge the PR. Once the pull request is reviewed, merge it to the main repository. To merge the pull request, go to the pull request and click on the \"Merge pull request\" button. Then, click on the \"Confirm merge\" button. Who should merge the PR? Before starting to work on the code, you should decide who should merge the pull request. There are two options: The project leader merges the pull request. The person who created the pull request merges it. This varies from project to project. Therefore, you should decide who should merge the pull request before starting to work on the code. But in both cases, the code has to be reviewed before the merging happens. Delete the branch. To delete the branch, go your remote repository and click on the \"Branches\" button. Then, select the branch you want to delete and click on the \"Delete branch\" button. Locally, you can delete the branch by running git branch -d <branch-name> . Pull the changes from the main repository. To pull the changes, run git pull <remote-name> master . Once you are done with the steps above, you can repeat the process for the next feature. Coding workflow The following steps are the steps you should follow when working on the code after you setup your repository locally: create a new branch for each feature you are working on: git checkout -b <branch-name> implement the feature you are working on add the changes you made to the code: git add <file-name> commit the changes you made to the code: git commit -m \"<commit-message>\" once you are done with the feature, commit the changes and push them to the remote repository: git push origin <branch-name> Additional steps are required when working in a team: create a pull request wait for the pull request to be reviewed and merged delete the branch you created: git branch -d <branch-name> Afterwards, you can clean the local repository by pulling the changes from the main repository: git pull <main-remote-name> main Repeat the process for the next feature.","title":"Working on the Code"},{"location":"experiments/github-playbook/#working-on-the-documentation","text":"The documentation helps the team members to understand the code. Therefore, it is good practice to write the documentation for the code you are working on. The documentation should be clear and concise. It should also be updated periodically. The documentation can be written in the code itself or in a separate file. If you are writing the documentation in a separate file, make sure to add the file to the repository. From the documentation, the following things should be clear: What is the purpose of the code? How to start the code (if applicable)? What are the features of the code? How to use the code? Documentation on a project The way how documentation is provided should be decided within the team. Some teams prefer to write the documentation in the code itself, while others prefer to write it in a separate file. Talk to your team members and decide how you will write the documentation.","title":"Working on the Documentation"},{"location":"experiments/how-to-start/","text":"How to Start This section contains information on how to run experiments. The information in this section is based on the experience of the authors of these guidelines. Note that you don't have to follow these guidelines. You can follow any guidelines you want. However, we recommend you to follow what is written here. Running Experiments Create an account on GitHub. If you don't have an account, you can create one here . Create a GitHub repository. The repository is where you will have all of your code used to perform the experiments you are interested in. Add the collaborators to the repository. The collaborators are the people who will help you with the experiments. Perform the experiments. Write the code, download the data, run the experiments, and save the results. Once you run an experiment, save the model version, the code version, hyper-parameters, and the results. Also, we suggest so save the code as a separate branch in the repository. This will help you to reproduce the results in the future. When you are done, you can Write a Paper .","title":"How to Start"},{"location":"experiments/how-to-start/#how-to-start","text":"This section contains information on how to run experiments. The information in this section is based on the experience of the authors of these guidelines. Note that you don't have to follow these guidelines. You can follow any guidelines you want. However, we recommend you to follow what is written here.","title":"How to Start"},{"location":"experiments/how-to-start/#running-experiments","text":"Create an account on GitHub. If you don't have an account, you can create one here . Create a GitHub repository. The repository is where you will have all of your code used to perform the experiments you are interested in. Add the collaborators to the repository. The collaborators are the people who will help you with the experiments. Perform the experiments. Write the code, download the data, run the experiments, and save the results. Once you run an experiment, save the model version, the code version, hyper-parameters, and the results. Also, we suggest so save the code as a separate branch in the repository. This will help you to reproduce the results in the future. When you are done, you can Write a Paper .","title":"Running Experiments"},{"location":"experiments/machines-for-development/","text":"Machines for Development Page is under construction. Please come back later.","title":"\ud83d\udea7 Machines for Development"},{"location":"experiments/machines-for-development/#machines-for-development","text":"Page is under construction. Please come back later.","title":"Machines for Development"},{"location":"experiments/technology-stack/","text":"Technology Stack This page contains the info about the technologies that we used for research and in projects. Main Goals To use technology that is known to the majority of the team To use technology such that other team members can help and/or maintain the code While some of the items are prefered over others (depicted with ), these are just guidelines to achieve the above mentioned goals. Programming Languages Python , Conda NodeJS , JavaScript , TypeScript C++ ML Libraries Scikit-learn . It is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support-vector machines, ... PyTorch . It is a machine learning framework based on the Torch library, used for applications such as computer vision and natural language processing, originally developed by Meta AI and now part of the Linux Foundation umbrella. TensorFlow . It is a free and open-source software library for machine learning and artificial intelligence. It can be used across a range of tasks but has a particular focus on training and inference of deep neural networks. HuggingFace . It is most notable for its Transformers library built for natural language processing applications and its platform that allows users to share machine learning models and datasets. PyG . It is a library built upon PyTorch to easily write and train Graph Neural Networks for a wide range of applications related to structured data. QMiner . Analytic platform for real-time large-scale streams containing structured and unstructured data. Developed at the E3 department. Databases PostgreSQL . Also known as Postgres, it is a free and open-source relational database management system emphasizing extensibility and SQL compliance. Redis . It is an in-memory data structure store, used as a distributed, in-memory key\u2013value database, cache and message broker, with optional durability. InfluxDB . It is an open-source time series database developed by the company InfluxData. It is written in the Go programming language for storage and retrieval of time series data in fields such as operations monitoring, application metrics, Internet of Things sensor data, and real-time analytics. TimescaleDB . It expands PostgreSQL for time series and analytics. Handle relentless streams of time-series data with the performance, scalability, and usability that your application needs. Apache Kafka . It is a distributed event store and stream-processing platform. It is an open-source system developed by the Apache Software Foundation written in Java and Scala. The project aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds. Services Elasticsearch . It is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents. Kibana . It is a source-available data visualization dashboard software for Elasticsearch, whose free and open source successor in OpenSearch is OpenSearch Dashboards. Frontend Development React . It is a free and open-source front-end JavaScript library for building user interfaces based on UI components. Angular . It is a TypeScript-based free and open-source web application framework led by the Angular Team at Google and by a community of individuals and corporations. Design Figma . It is a collaborative web application for interface design, with additional offline features enabled by desktop applications for macOS and Windows. Reports Microsoft Word . Microsoft Word is a word processing software developed by Microsoft. LaTeX ; Overleaf . LaTeX is a high-quality typesetting system; it includes features designed for the production of technical and scientific documentation. LaTeX is the de facto standard for the communication and publication of scientific documents.","title":"Technology Stack"},{"location":"experiments/technology-stack/#technology-stack","text":"This page contains the info about the technologies that we used for research and in projects. Main Goals To use technology that is known to the majority of the team To use technology such that other team members can help and/or maintain the code While some of the items are prefered over others (depicted with ), these are just guidelines to achieve the above mentioned goals.","title":"Technology Stack"},{"location":"experiments/technology-stack/#programming-languages","text":"Python , Conda NodeJS , JavaScript , TypeScript C++","title":"Programming Languages"},{"location":"experiments/technology-stack/#ml-libraries","text":"Scikit-learn . It is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support-vector machines, ... PyTorch . It is a machine learning framework based on the Torch library, used for applications such as computer vision and natural language processing, originally developed by Meta AI and now part of the Linux Foundation umbrella. TensorFlow . It is a free and open-source software library for machine learning and artificial intelligence. It can be used across a range of tasks but has a particular focus on training and inference of deep neural networks. HuggingFace . It is most notable for its Transformers library built for natural language processing applications and its platform that allows users to share machine learning models and datasets. PyG . It is a library built upon PyTorch to easily write and train Graph Neural Networks for a wide range of applications related to structured data. QMiner . Analytic platform for real-time large-scale streams containing structured and unstructured data. Developed at the E3 department.","title":"ML Libraries"},{"location":"experiments/technology-stack/#databases","text":"PostgreSQL . Also known as Postgres, it is a free and open-source relational database management system emphasizing extensibility and SQL compliance. Redis . It is an in-memory data structure store, used as a distributed, in-memory key\u2013value database, cache and message broker, with optional durability. InfluxDB . It is an open-source time series database developed by the company InfluxData. It is written in the Go programming language for storage and retrieval of time series data in fields such as operations monitoring, application metrics, Internet of Things sensor data, and real-time analytics. TimescaleDB . It expands PostgreSQL for time series and analytics. Handle relentless streams of time-series data with the performance, scalability, and usability that your application needs. Apache Kafka . It is a distributed event store and stream-processing platform. It is an open-source system developed by the Apache Software Foundation written in Java and Scala. The project aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds.","title":"Databases"},{"location":"experiments/technology-stack/#services","text":"Elasticsearch . It is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents. Kibana . It is a source-available data visualization dashboard software for Elasticsearch, whose free and open source successor in OpenSearch is OpenSearch Dashboards.","title":"Services"},{"location":"experiments/technology-stack/#frontend-development","text":"React . It is a free and open-source front-end JavaScript library for building user interfaces based on UI components. Angular . It is a TypeScript-based free and open-source web application framework led by the Angular Team at Google and by a community of individuals and corporations.","title":"Frontend Development"},{"location":"experiments/technology-stack/#design","text":"Figma . It is a collaborative web application for interface design, with additional offline features enabled by desktop applications for macOS and Windows.","title":"Design"},{"location":"experiments/technology-stack/#reports","text":"Microsoft Word . Microsoft Word is a word processing software developed by Microsoft. LaTeX ; Overleaf . LaTeX is a high-quality typesetting system; it includes features designed for the production of technical and scientific documentation. LaTeX is the de facto standard for the communication and publication of scientific documents.","title":"Reports"},{"location":"experiments/tutorials/","text":"Tutorials Page is under construction. This page contains a list of tutorials to kickstart working on various AI topics. General Python Basics Collection of Programming Courses on Kaggle","title":"\ud83d\udea7 Tutorials"},{"location":"experiments/tutorials/#tutorials","text":"Page is under construction. This page contains a list of tutorials to kickstart working on various AI topics.","title":"Tutorials"},{"location":"experiments/tutorials/#general","text":"Python Basics Collection of Programming Courses on Kaggle","title":"General"},{"location":"papers/conferences/","text":"Conferences Page is under construction. Please come back later.","title":"\ud83d\udea7 Conferences"},{"location":"papers/conferences/#conferences","text":"Page is under construction. Please come back later.","title":"Conferences"},{"location":"papers/how-to-start/","text":"How to Start This section contains information on how to start writing a paper. The information in this section is based on the experience of the authors of these guidelines. Note that you don't have to follow these guidelines. You can follow any guidelines you want. However, we recommend you to follow what is written here. Writing the Paper Create an account on Overleaf. If you don't have an account, you can create one here . Get Overleaf Premium Account (optional). To get the premium account, you need to create an account on IEEE Colabratec. You can create an account here . After creating an account, go to \u201cAccount Settings > Attached Services\u201c and connect to your Overleaf account. Make sure you link the same account you created in step 2. Write the paper. You can write the paper using Overleaf. Add the authors of the paper as collaborators. The authors are the people who helped you with the experiments and the paper. If you do not know how to begin, see Paper Structure . Find a journal. Find a journal where you want to submit the paper. We suggest you find a journal that is related to the field of your research. Also, have a list of possible journals in case the first journal rejects your paper. Submit the paper. Once you are done with the paper, submit it to the journal. The journal will review the paper and will either accept or reject it. If the paper is rejected, you can submit it to another journal. Submission Requirements Depending on the journal, the submission requirements may vary. However, the following requirements are usually common: The paper should be written in English A document containing the paper highlights Author agreement statement Cover letter Declaration of competing interests Credit author statement","title":"How to Start"},{"location":"papers/how-to-start/#how-to-start","text":"This section contains information on how to start writing a paper. The information in this section is based on the experience of the authors of these guidelines. Note that you don't have to follow these guidelines. You can follow any guidelines you want. However, we recommend you to follow what is written here.","title":"How to Start"},{"location":"papers/how-to-start/#writing-the-paper","text":"Create an account on Overleaf. If you don't have an account, you can create one here . Get Overleaf Premium Account (optional). To get the premium account, you need to create an account on IEEE Colabratec. You can create an account here . After creating an account, go to \u201cAccount Settings > Attached Services\u201c and connect to your Overleaf account. Make sure you link the same account you created in step 2. Write the paper. You can write the paper using Overleaf. Add the authors of the paper as collaborators. The authors are the people who helped you with the experiments and the paper. If you do not know how to begin, see Paper Structure . Find a journal. Find a journal where you want to submit the paper. We suggest you find a journal that is related to the field of your research. Also, have a list of possible journals in case the first journal rejects your paper. Submit the paper. Once you are done with the paper, submit it to the journal. The journal will review the paper and will either accept or reject it. If the paper is rejected, you can submit it to another journal.","title":"Writing the Paper"},{"location":"papers/how-to-start/#submission-requirements","text":"Depending on the journal, the submission requirements may vary. However, the following requirements are usually common: The paper should be written in English A document containing the paper highlights Author agreement statement Cover letter Declaration of competing interests Credit author statement","title":"Submission Requirements"},{"location":"papers/journals/","text":"Journals This page contains resources for finding journals to publish your written papers. Search Engines and Catalogs research.com is a website containing lists of top research conferences and journals covering different scientific fields. Elsevier Journal Finder is a search engine, where you can input some of your paper's information and it will return a list of Elsevier journals that are relevant to your research. Springer Journal Suggester is a search engine used to find potential Springer journals to which you can submit your paper to. By inputing the paper's title and abstract, the search engine returns a list of journals that are potentially relevant to your work. MDPI Journal Finder is a search engine used to find potential relevant MDPI journals. By inputing the paper's title and abstract, the search engine returns a list of journals that best fit your paper. IEEE Publication Recommender is a search engine used to find potential IEEE journals to which you can submit your paper to. \u26a0\ufe0f does not work well ACM Journals is a a website containing the list of ACM journals. Example List of Journals The list contains journals that the authors have submitted to or were considering to submit to them. Note that this is not an exhaustive list. If you know of a journal that should be listed, please let us know. Computers in Industry Elsevier Information Processing and Management Elsevier Information Sciences Elsevier Knowledge-Based Systems Elsevier IEEE Access IEEE IEEE Transations on Knowledge and Data Engineering IEEE Applied Science MDPI Scientific Data Nature Engineering Applications of Artificial Intelligence Springer Knowledge and Information Systems Springer Language Resources and Evaluation Springer Machine Learning Springer","title":"Journals"},{"location":"papers/journals/#journals","text":"This page contains resources for finding journals to publish your written papers.","title":"Journals"},{"location":"papers/journals/#search-engines-and-catalogs","text":"research.com is a website containing lists of top research conferences and journals covering different scientific fields. Elsevier Journal Finder is a search engine, where you can input some of your paper's information and it will return a list of Elsevier journals that are relevant to your research. Springer Journal Suggester is a search engine used to find potential Springer journals to which you can submit your paper to. By inputing the paper's title and abstract, the search engine returns a list of journals that are potentially relevant to your work. MDPI Journal Finder is a search engine used to find potential relevant MDPI journals. By inputing the paper's title and abstract, the search engine returns a list of journals that best fit your paper. IEEE Publication Recommender is a search engine used to find potential IEEE journals to which you can submit your paper to. \u26a0\ufe0f does not work well ACM Journals is a a website containing the list of ACM journals.","title":"Search Engines and Catalogs"},{"location":"papers/journals/#example-list-of-journals","text":"The list contains journals that the authors have submitted to or were considering to submit to them. Note that this is not an exhaustive list. If you know of a journal that should be listed, please let us know. Computers in Industry Elsevier Information Processing and Management Elsevier Information Sciences Elsevier Knowledge-Based Systems Elsevier IEEE Access IEEE IEEE Transations on Knowledge and Data Engineering IEEE Applied Science MDPI Scientific Data Nature Engineering Applications of Artificial Intelligence Springer Knowledge and Information Systems Springer Language Resources and Evaluation Springer Machine Learning Springer","title":"Example List of Journals"},{"location":"papers/paper-structure/","text":"Paper Structure This page describes how one can structure the outline of a scientific paper. In addition to the structure, it also describes the content of each section. Note that this is just an example of a paper structure - do whatever you think is best. Title The title needs to tell what the paper is about. Authors The authors of the paper. Depending on the journal, the authors may be listed in a different order. The author list should also include the affiliation of each author. The affiliation should include the name of the institution, the city, and the country. Don't forget to include the corresponding author. The corresponding author is the person who is responsible for the paper. The corresponding author is usually the first author. Abstract The abstract should be a short summary of the paper. The abstract should be self-contained and should not refer to other parts of the paper. The abstract should be written in the past tense. Some points the abstract should cover: Motivation Contribution (method, data set, etc.) How was the contribution evaluated? Results overview Introduction The introduction/motivation for the research. As an advice, structure the paragraphs such that (1) the first sentence is a statement, (2) the following sentences are arguments for the statement, and (3, optional) provide an example where the statement holds. Some points the introduction should cover: The broad view of the problem The current solutions and how they work [do not go into details] The limitations of the current solutions [introduction to the problem] Research objectives and contributions What is the main aim of the research [what is the solution you want to find] What are the objectives of the research [how are you going to find the solution] The description of the actual solution, how it was evaluated, and a brief overview of the results List of scientific contributions of the paper Example of the scientific contributions list The contributions of this paper are: the theoretical background of using optimal transport for measuring document relevancy, a supervised multilingual learning-to-rank model which outputs interpretable relevance scores, a comparison of the model's performance fine-tuned using two different loss functions commonly used for training document retrieval models that employ language models. Paper structure [per section] Related Work The description of the work performed in the fields related to your research. Tip It is advised to include related work that was published in the journal you wish to submit to. Methodology How to solve the problem split into two parts: theory and implementation. Theory. The mathematical description of the solution. Implementation. The model architecture or step-by-step description of the methodology. Experiment Setting The experiment setting describes how the proposed solution was evaluated. The experiment setting should include the following sections: Data Set. The description of the data set used for the evaluation. The data set should include the following information: The data set description Data set pre-processing Data set statistics Evaluation Metrics. The description of metrics used to evaluated the solution. The evaluation metrics should include the following information: The description of the metric The formula of the metric The interpretation of the metric Baseline methods. The methods used to compare the proposed solution with. The baseline methods should include the following information: The description of the method Citation to the related work Implementation details. The details of how the solution was implemented. The implementation details should include the following information: The description of the hyper- and training parameters Libraries and frameworks used Possible link to the code [optional] Evaluation Results The section containing the results of the evaluation. It can contain (1) tables with metric scores, and (2) figures with the results. Discussion The discussion should contain the findings the evaluation results imply. Performance comparison between the proposed solution and the baseline methods Advantages of the proposed solution over the baseline methods Disadvantages of the proposed solution over the baseline methods Conclusion & Future Work The conclusion should summarize the main findings of the paper. The main findings of the paper How does the findings contribute to the field [connection to the introduction] Possible next steps to advance the research Acknowledgements Who supported the research, financially or otherwise. Bibliography The references to the work cited in the paper.","title":"Paper Structure"},{"location":"papers/paper-structure/#paper-structure","text":"This page describes how one can structure the outline of a scientific paper. In addition to the structure, it also describes the content of each section. Note that this is just an example of a paper structure - do whatever you think is best.","title":"Paper Structure"},{"location":"papers/paper-structure/#title","text":"The title needs to tell what the paper is about.","title":"Title"},{"location":"papers/paper-structure/#authors","text":"The authors of the paper. Depending on the journal, the authors may be listed in a different order. The author list should also include the affiliation of each author. The affiliation should include the name of the institution, the city, and the country. Don't forget to include the corresponding author. The corresponding author is the person who is responsible for the paper. The corresponding author is usually the first author.","title":"Authors"},{"location":"papers/paper-structure/#abstract","text":"The abstract should be a short summary of the paper. The abstract should be self-contained and should not refer to other parts of the paper. The abstract should be written in the past tense. Some points the abstract should cover: Motivation Contribution (method, data set, etc.) How was the contribution evaluated? Results overview","title":"Abstract"},{"location":"papers/paper-structure/#introduction","text":"The introduction/motivation for the research. As an advice, structure the paragraphs such that (1) the first sentence is a statement, (2) the following sentences are arguments for the statement, and (3, optional) provide an example where the statement holds. Some points the introduction should cover: The broad view of the problem The current solutions and how they work [do not go into details] The limitations of the current solutions [introduction to the problem] Research objectives and contributions What is the main aim of the research [what is the solution you want to find] What are the objectives of the research [how are you going to find the solution] The description of the actual solution, how it was evaluated, and a brief overview of the results List of scientific contributions of the paper Example of the scientific contributions list The contributions of this paper are: the theoretical background of using optimal transport for measuring document relevancy, a supervised multilingual learning-to-rank model which outputs interpretable relevance scores, a comparison of the model's performance fine-tuned using two different loss functions commonly used for training document retrieval models that employ language models. Paper structure [per section]","title":"Introduction"},{"location":"papers/paper-structure/#related-work","text":"The description of the work performed in the fields related to your research. Tip It is advised to include related work that was published in the journal you wish to submit to.","title":"Related Work"},{"location":"papers/paper-structure/#methodology","text":"How to solve the problem split into two parts: theory and implementation. Theory. The mathematical description of the solution. Implementation. The model architecture or step-by-step description of the methodology.","title":"Methodology"},{"location":"papers/paper-structure/#experiment-setting","text":"The experiment setting describes how the proposed solution was evaluated. The experiment setting should include the following sections: Data Set. The description of the data set used for the evaluation. The data set should include the following information: The data set description Data set pre-processing Data set statistics Evaluation Metrics. The description of metrics used to evaluated the solution. The evaluation metrics should include the following information: The description of the metric The formula of the metric The interpretation of the metric Baseline methods. The methods used to compare the proposed solution with. The baseline methods should include the following information: The description of the method Citation to the related work Implementation details. The details of how the solution was implemented. The implementation details should include the following information: The description of the hyper- and training parameters Libraries and frameworks used Possible link to the code [optional]","title":"Experiment Setting"},{"location":"papers/paper-structure/#evaluation-results","text":"The section containing the results of the evaluation. It can contain (1) tables with metric scores, and (2) figures with the results.","title":"Evaluation Results"},{"location":"papers/paper-structure/#discussion","text":"The discussion should contain the findings the evaluation results imply. Performance comparison between the proposed solution and the baseline methods Advantages of the proposed solution over the baseline methods Disadvantages of the proposed solution over the baseline methods","title":"Discussion"},{"location":"papers/paper-structure/#conclusion-future-work","text":"The conclusion should summarize the main findings of the paper. The main findings of the paper How does the findings contribute to the field [connection to the introduction] Possible next steps to advance the research","title":"Conclusion &amp; Future Work"},{"location":"papers/paper-structure/#acknowledgements","text":"Who supported the research, financially or otherwise.","title":"Acknowledgements"},{"location":"papers/paper-structure/#bibliography","text":"The references to the work cited in the paper.","title":"Bibliography"},{"location":"papers/reference-managers/","text":"Reference Managers Page is under construction. Please come back later.","title":"\ud83d\udea7 Reference Managers"},{"location":"papers/reference-managers/#reference-managers","text":"Page is under construction. Please come back later.","title":"Reference Managers"},{"location":"proposals/how-to-start/","text":"How to Start Page is under construction. Please come back later.","title":"\ud83d\udea7 How to Start"},{"location":"proposals/how-to-start/#how-to-start","text":"Page is under construction. Please come back later.","title":"How to Start"}]}